---
// src/pages/portfolio/[slug].astro
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro'; // Adjust path if your layout is elsewhere

export async function getStaticPaths() {
  // This is the robust getStaticPaths that worked for you
  console.log("Executing getStaticPaths in [slug].astro...");
  try {
    const portfolioEntries = await getCollection('portfolio');
    if (!portfolioEntries || portfolioEntries.length === 0) {
      console.error("getStaticPaths: No portfolio entries found. Returning empty array.");
      return [];
    }
    console.log(`getStaticPaths: Found ${portfolioEntries.length} portfolio entries.`);
    
    return portfolioEntries.map(entry => {
      console.log(`getStaticPaths: Creating path for slug: '${entry.slug}'`);
      return {
        params: { slug: entry.slug },
        props: { project: entry }, 
      };
    });
  } catch (e) {
    console.error("getStaticPaths: Error during execution:", e);
    return [];
  }
}

const { project } = Astro.props;

if (!project) { 
  // This case should ideally be handled by Astro returning a 404 if no path matches.
  // Adding a more explicit error or redirect if project prop is missing.
  console.error(`[slug].astro: Project prop is undefined for path ${Astro.url.pathname}.`);
  return Astro.redirect("/404"); // Or return a custom 404 Response
}

const { Content } = await project.render();
const projectData = project.data; // Use projectData for clarity

const { 
    title = "Untitled Project",
    description = "No description available.", 
    publishDate,
    coverImage, 
    tags, 
    client, 
    role, 
    liveLink, 
    repoLink, 
    videoLink,
    slides 
} = projectData;

const formattedDate = publishDate 
    ? new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'long', day: 'numeric' }).format(new Date(publishDate)) 
    : "Date not set";
const isoDate = publishDate ? new Date(publishDate).toISOString() : '';
---

<BaseLayout title={title} description={description}>
  <article class="project-detail">
    {/* --- Project Header --- */}
    <header class="project-header">
      <h1>{title}</h1>
      //<p class="publish-date"><time datetime={isoDate}>{formattedDate}</time></p>
      {tags && tags.length > 0 && (
        <div class="tags">
          {tags.map(tag => <span class="tag-detail">{tag}</span>)}
        </div>
      )}
    </header>

    {/* --- Cover Image --- */}
    {coverImage && coverImage.url && (
      <div class="project-cover-image">
        {/* If using images from `public/` directly: */}
        <img src={coverImage.url} alt={coverImage.alt || `Cover image for ${title}`} loading="lazy" />
        
        {/* Example IF using Astro's <Image /> and image is in `src/assets/` 
            and coverImage.url is just the filename e.g., "my-project-cover.jpg" 
            You'd need to adjust your frontmatter data and import logic for this.
        <Image 
            src={import(`../../../assets/portfolio-images/${project.slug}/${coverImage.url}`)} 
            alt={coverImage.alt || `Cover image for ${title}`} 
            widths={[400, 800, 1200]} 
            sizes="(max-width: 800px) 100vw, 800px" 
            format="webp"
            loading="lazy"
        /> 
        */}
      </div>
    )}

    {/* --- Meta Links & Info --- */}
    <div class="project-meta-links">
      {client && <p><strong>Client:</strong> {client}</p>}
      {role && <p><strong>My Role:</strong> {role}</p>}
      {(liveLink || repoLink || videoLink) && (
        <div class="external-links">
          {liveLink && <a href={liveLink} target="_blank" rel="noopener noreferrer" class="button">View Live Site</a>}
          {repoLink && <a href={repoLink} target="_blank" rel="noopener noreferrer" class="button secondary">View Repository</a>}
          {videoLink && <a href={videoLink} target="_blank" rel="noopener noreferrer" class="button secondary">Watch Demo Video</a>}
        </div>
      )}
    </div>

    {/* --- Main Markdown Content --- */}
    <div class="project-content">
      {Content ? <Content /> : <p>This project's content is being updated.</p>}
    </div>

    {/* --- Slides Section --- */}
    {slides && slides.length > 0 && (
      <section class="project-slides-section">
        <h2>Presentation Slides / Key Visuals</h2>
        <div class="slides-gallery">
          {slides.map((slide, index) => (
            <figure class="slide-item">
              {slide.url ? (
                <img src={slide.url} alt={slide.alt || `${title} - Slide ${index + 1}`} loading="lazy" />
              ) : (
                <p class="slide-error">Error: Slide image URL missing for slide {index + 1}</p>
              )}
              {slide.caption && <figcaption>{slide.caption}</figcaption>}
            </figure>
          ))}
        </div>
      </section>
    )}
  </article>
</BaseLayout>

<style>
  .project-detail {
    max-width: 800px;
    margin: 0 auto 2rem auto;
    padding: 0 1rem; /* Add some padding for smaller screens */
  }

  /* --- Project Header Styles (Stacked & Centered) --- */
  .project-header {
    display: flex; 
    flex-direction: column; 
    align-items: center; 
    text-align: center; 
    margin-bottom: 2.5rem; 
    padding-bottom: 1.5rem;
    border-bottom: 1px solid var(--border-color);
    position: static;
  }

  .project-header h1 {
    font-size: 2.5rem; /* Adjusted for balance */
    margin-bottom: 0.5rem; 
    color: var(--text-color);
    line-height: 1.2;
  }

  .publish-date {
    font-size: 0.9rem; /* Adjusted */
    color: var(--secondary-text-color);
    margin-top: 0.25rem; 
    margin-bottom: 1rem; 
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    justify-content: center; 
    gap: 0.5rem; 
    margin-top: 0.25rem; 
  }

  .tag-detail {
    display: inline-block;
    background-color: var(--secondary-bg-color);
    color: var(--accent-color); 
    border: 1px solid var(--accent-color); 
    padding: 0.3rem 0.8rem; 
    border-radius: 16px;
    font-size: 0.75rem; /* Adjusted */
    font-weight: 500;
  }
  html.dark .tag-detail {
    background-color: color-mix(in srgb, var(--bg-color) 80%, var(--accent-color));
  }

  /* --- Cover Image Styles --- */
  .project-cover-image {
    margin-bottom: 2rem;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0,0,0,0.08);
  }
  html.dark .project-cover-image {
     box-shadow: 0 4px 15px rgba(0,0,0,0.2);
  }
  .project-cover-image img {
    width: 100%;
    height: auto;
    display: block;
  }
  
  /* --- Meta Links Styles --- */
  .project-meta-links {
    margin-bottom: 2.5rem;
    padding: 1.25rem;
    background-color: var(--secondary-bg-color);
    border-radius: 8px;
    border: 1px solid var(--border-color);
  }
  .project-meta-links p {
    margin: 0 0 0.75rem 0;
    font-size: 0.95rem;
  }
  .project-meta-links strong {
    color: var(--text-color);
  }
  .external-links {
    margin-top: 1rem;
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
  }

  /* --- Button Styles (re-iterate from global or ensure they apply) --- */
  .button, .button.secondary {
    display: inline-block;
    padding: 0.6rem 1.2rem;
    border-radius: 6px;
    text-decoration: none;
    font-size: 0.9rem;
    font-weight: 500;
    text-align: center;
    transition: background-color 0.2s ease-out, border-color 0.2s ease-out, color 0.2s ease-out;
    cursor: pointer;
  }
  .button {
    background-color: var(--accent-color);
    color: #fff; /* Ensure good contrast with your sage green */
    border: 1px solid var(--accent-color);
  }
  .button:hover {
    background-color: var(--link-hover-color);
    border-color: var(--link-hover-color);
    color: #fff;
  }
  .button.secondary {
    background-color: transparent;
    color: var(--accent-color);
    border: 1px solid var(--accent-color);
  }
  .button.secondary:hover {
    background-color: color-mix(in srgb, var(--accent-color) 15%, transparent);
  }

  /* --- Project Content (from Markdown <Content />) Styles --- */
  .project-content {
    line-height: 1.75; 
    font-size: 1rem; /* Or your preferred reading size, e.g., 1.05rem, 1.1rem */
    color: var(--text-color);
  }
  .project-content h2 {
    font-size: 1.875rem; /* ~30px */
    margin-top: 2.5rem;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid var(--border-color);
  }
  .project-content h3 {
    font-size: 1.5rem; /* ~24px */
    margin-top: 2rem;
    margin-bottom: 0.75rem;
  }
  .project-content p {
    margin-bottom: 1.25rem;
  }
  .project-content ul, .project-content ol {
    margin-bottom: 1.25rem;
    padding-left: 1.75rem; /* Ensure enough indent */
  }
  .project-content li {
    margin-bottom: 0.6rem;
  }
  .project-content blockquote {
    margin-left: 0;
    padding: 0.5rem 1.5rem;
    border-left: 4px solid var(--accent-color);
    font-style: italic;
    color: var(--secondary-text-color);
    background-color: var(--secondary-bg-color);
    border-radius: 0 4px 4px 0;
  }
  .project-content img { /* Images within the markdown content */
    margin: 1.5rem auto; /* Center block images */
    border-radius: 6px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    max-width: 100%; /* Already in global, but good to ensure */
    display: block;
  }
  html.dark .project-content img {
    box-shadow: 0 2px 10px rgba(0,0,0,0.25);
  }
  .project-content video { /* Styles for self-hosted videos from Markdown */
    display: block;
    max-width: 100%;
    height: auto;
    margin: 1.5rem auto;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }
  html.dark .project-content video {
    box-shadow: 0 2px 10px rgba(0,0,0,0.3);
  }
  .project-content .video-responsive-wrapper { /* If using this class in Markdown for iframes */
      margin: 1.5rem 0;
  }


  /* --- Slides Section Styles --- */
  .project-slides-section {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid var(--border-color);
  }
  .project-slides-section h2 {
    font-size: 1.875rem; 
    margin-bottom: 1.5rem;
    text-align: center; /* Center the "Presentation Slides" title */
  }
  .slides-gallery {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(min(100%, 320px), 1fr)); /* Responsive grid */
    gap: 1.5rem;
  }
  .slide-item {
    margin: 0;
    border: 1px solid var(--border-color);
    padding: 0.75rem;
    border-radius: 8px;
    background-color: var(--secondary-bg-color);
    box-shadow: 0 1px 3px rgba(0,0,0,0.04);
    text-align: center; /* Center image and caption within the figure */
  }
  html.dark .slide-item {
    box-shadow: 0 1px 3px rgba(0,0,0,0.2);
  }
  .slide-item img {
    width: 100%; /* Make image take full width of its figure container */
    height: auto;
    border-radius: 4px;
    margin-bottom: 0.75rem;
  }
  .slide-item figcaption {
    font-size: 0.85rem;
    text-align: center;
    color: var(--secondary-text-color);
    padding-top: 0.25rem;
  }
  .slide-error {
    color: red;
    font-style: italic;
  }

  /* Responsive adjustments for smaller screens */
  @media (max-width: 768px) {
    .project-header h1 {
      font-size: 2rem;
    }
    .project-content {
      font-size: 1rem;
    }
    .project-content h2, .project-slides-section h2 {
      font-size: 1.5rem;
    }
    .project-content h3 {
      font-size: 1.25rem;
    }
    .slides-gallery {
      grid-template-columns: 1fr; /* Stack slides on very small screens */
      gap: 1rem;
    }
  }
</style>
